# WARNING: this file is automatically generated by scripts/generate-config.js
# info on building Docker images on Circle
# https://circleci.com/docs/2.0/building-docker-images/
version: 2.1

orbs:
    node: circleci/node@5.0.0

commands:
    halt-on-branch:
        description: Halt current CircleCI job if not on master branch
        steps:
            - run:
                    name: Halting job if not on master branch
                    command: |
                        if [[ "$CIRCLE_BRANCH" != "master" ]]; then
                          echo "Not master branch, will skip the rest of commands"
                          circleci-agent step halt
                        else
                          echo "On master branch, can continue"
                        fi

    halt-if-docker-image-exists:
        description: Halt current CircleCI job if Docker image exists already
        parameters:
            imageName:
                type: string
                description: Docker image name to test
        steps:
            - run:
                  name: Check if image << parameters.imageName >> exists or Docker hub does not respond
                  # using https://github.com/cypress-io/docker-image-not-found
                  # to check if Docker hub definitely does not have this image
                  command: |
                      if npx docker-image-not-found --repo << parameters.imageName >>; then
                        echo Docker hub says image << parameters.imageName >> does not exist
                      else
                        echo Docker hub has image << parameters.imageName >> or not responding
                        echo We should stop in this case
                        circleci-agent step halt
                      fi

    test-base-image:
        description: Build a test image from base image and test it
        parameters:
            nodeVersion:
                type: string
                description: Node version to expect in the base image, starts with "v"
            imageName:
                type: string
                description: Cypress base docker image to test
        steps:
            - run:
                  name: test image << parameters.imageName >>
                  no_output_timeout: '3m'
                  command: |
                      docker build -t flotwig/test -\\<<EOF
                      FROM << parameters.imageName >>
                      RUN echo "current user: $(whoami)"
                      ENV CI=1
                      WORKDIR /app
                      RUN npm init --yes
                      RUN npm install --save-dev cypress cypress-expect
                      RUN ./node_modules/.bin/cypress verify
                      RUN npx @bahmutov/cly init
                      # run Cypress by itself
                      RUN ./node_modules/.bin/cypress run
                      # run Cypress using module API and confirm number of passing tests
                      RUN ./node_modules/.bin/cypress-expect run --passing 1
                      EOF

            - run:
                  name: test image << parameters.imageName >> using Kitchensink
                  no_output_timeout: '3m'
                  command: |
                      docker build -t flotwig/test-kitchensink -\\<<EOF
                      FROM << parameters.imageName >>
                      RUN echo "current user: $(whoami)"
                      ENV CI=1
                      WORKDIR /app
                      ENV CYPRESS_INTERNAL_FORCE_SCAFFOLD=1
                      RUN npm init --yes
                      RUN npm install --save-dev cypress cypress-expect
                      RUN ./node_modules/.bin/cypress verify
                      RUN echo '{}' > cypress.json
                      # run Cypress and confirm minimum number of passing tets
                      RUN ./node_modules/.bin/cypress-expect run --min-passing 100
                      EOF

    test-browser-image:
        description: Build a test image from browser image and test it
        parameters:
            imageName:
                type: string
                description: Cypress browser docker image to test
            chromeVersion:
                type: string
                default: ''
                description: Chrome version to expect in the base image, starts with "Google Chrome XX"
            firefoxVersion:
                type: string
                default: ''
                description: Firefox version to expect in the base image, starts with "Mozilla Firefox XX"
            edgeVersion:
                type: string
                default: ''
                description: Edge version to expect in the base image, starts with "Microsoft Edge"
        steps:
            - when:
                  condition: << parameters.chromeVersion >>
                  steps:
                      - run:
                            name: confirm image has Chrome << parameters.chromeVersion >>
                            # do not run Docker in the interactive mode - adds control characters!
                            # and use Bash regex string comparison
                            command: |
                                version=$(docker run << parameters.imageName >> google-chrome --version)
                                if [[ "$version" =~ ^"<< parameters.chromeVersion >>" ]]; then
                                  echo "Image has the expected version of Chrome << parameters.chromeVersion >>"
                                  echo "found $version"
                                else
                                  echo "Problem: image has unexpected Chrome version"
                                  echo "Expected << parameters.chromeVersion >> and got $version"
                                  exit 1
                                fi

            - when:
                  condition: << parameters.firefoxVersion >>
                  steps:
                      - run:
                            name: confirm the image has Firefox << parameters.firefoxVersion >>
                            command: |
                                version=$(docker run << parameters.imageName >> firefox --version)
                                if [[ "$version" =~ ^"<< parameters.firefoxVersion >>" ]]; then
                                  echo "Image has the expected version of Firefox << parameters.firefoxVersion >>"
                                  echo "found $version"
                                else
                                  echo "Problem: image has unexpected Firefox version"
                                  echo "Expected << parameters.firefoxVersion >> and got $version"
                                  exit 1
                                fi

            - when:
                  condition: << parameters.edgeVersion >>
                  steps:
                      - run:
                            name: confirm the image has Edge << parameters.edgeVersion >>
                            command: |
                                version=$(docker run << parameters.imageName >> edge --version)
                                if [[ "$version" ]]; then
                                  echo "Image has the a version of Edge << parameters.edgeVersion >>"
                                  echo "found $version"
                                else
                                  echo "Problem: image has no Edge version"
                                  echo "Expected to have $version"
                                  exit 1
                                fi

            - run:
                  name: test image << parameters.imageName >>
                  no_output_timeout: '3m'
                  command: |
                      docker build -t flotwig/test -\\<<EOF
                      FROM << parameters.imageName >>
                      RUN echo "current user: $(whoami)"
                      ENV CI=1
                      WORKDIR /app
                      RUN npm init --yes
                      RUN npm install --save-dev cypress
                      RUN ./node_modules/.bin/cypress verify
                      RUN npx @bahmutov/cly init
                      EOF

            - run:
                  name: Test built-in Electron browser
                  no_output_timeout: '1m'
                  command: docker run flotwig/test ./node_modules/.bin/cypress run

            - when:
                  condition: << parameters.chromeVersion >>
                  steps:
                      - run:
                            name: Test << parameters.chromeVersion >>
                            no_output_timeout: '1m'
                            command: docker run flotwig/test ./node_modules/.bin/cypress run --browser chrome

            - when:
                  condition: << parameters.firefoxVersion >>
                  steps:
                      - run:
                            name: Test << parameters.firefoxVersion >>
                            no_output_timeout: '1m'
                            command: docker run flotwig/test ./node_modules/.bin/cypress run --browser firefox

            - when:
                  condition: << parameters.edgeVersion >>
                  steps:
                      - run:
                            name: Test << parameters.edgeVersion >>
                            no_output_timeout: '1m'
                            command: docker run flotwig/test ./node_modules/.bin/cypress run --browser edge

            - run:
                  name: scaffold image << parameters.imageName >> using Kitchensink
                  no_output_timeout: '3m'
                  command: |
                      docker build -t flotwig/test-kitchensink -\\<<EOF
                      FROM << parameters.imageName >>
                      RUN echo "current user: $(whoami)"
                      ENV CI=1
                      WORKDIR /app
                      ENV CYPRESS_INTERNAL_FORCE_SCAFFOLD=1
                      RUN npm init --yes
                      RUN npm install --save-dev cypress
                      RUN ./node_modules/.bin/cypress verify
                      RUN echo '{}' > cypress.json
                      EOF

            - when:
                  condition: << parameters.chromeVersion >>
                  steps:
                      - run:
                            name: Test << parameters.chromeVersion >>
                            no_output_timeout: '1m'
                            command: docker run flotwig/test-kitchensink ./node_modules/.bin/cypress run --browser chrome

            - when:
                  condition: << parameters.firefoxVersion >>
                  steps:
                      - run:
                            name: Test << parameters.firefoxVersion >>
                            no_output_timeout: '1m'
                            command: docker run flotwig/test-kitchensink ./node_modules/.bin/cypress run --browser firefox

            - when:
                  condition: << parameters.edgeVersion >>
                  steps:
                      - run:
                            name: Test << parameters.edgeVersion >>
                            no_output_timeout: '1m'
                            command: docker run flotwig/test-kitchensink ./node_modules/.bin/cypress run --browser edge

    test-included-image-versions:
        description: Testing pre-installed versions
        parameters:
            cypressVersion:
                type: string
                description: Cypress version to test, like "4.0.0"
            imageName:
                type: string
                description: Cypress included docker image to test
        steps:
            - run:
                  name: 'Print versions'
                  command: docker run -it --entrypoint cypress flotwig/included:<< parameters.cypressVersion >> version

            - run:
                  name: 'Print info'
                  command: docker run -it --entrypoint cypress flotwig/included:<< parameters.cypressVersion >> info

            - run:
                  name: 'Check Node version'
                  command: |
                      export NODE_VERSION=$(docker run --entrypoint node flotwig/included:<< parameters.cypressVersion >> --version)
                      export CYPRESS_NODE_VERSION=$(docker run --entrypoint cypress flotwig/included:<< parameters.cypressVersion >> version --component node)
                      echo "Included Node $NODE_VERSION"
                      echo "Cypress includes Node $CYPRESS_NODE_VERSION"
                      # "node --version" returns something like "v12.1.2"
                      # and "cypres version ..." returns just "12.1.2"
                      if [ "$NODE_VERSION" = "v$CYPRESS_NODE_VERSION" ]; then
                        echo "Node versions match"
                      else
                        echo "Node version mismatch 🔥"
                        # TODO make sure there are no extra characters in the versions
                        # https://github.com/cypress-io/cypress-docker-images/issues/411
                        # exit 1
                      fi

    test-included-image:
        description: Testing Docker image with Cypress pre-installed
        parameters:
            cypressVersion:
                type: string
                description: Cypress version to test, like "4.0.0"
            imageName:
                type: string
                description: Cypress included docker image to test
        steps:
            - run:
                  name: New test project and testing
                  no_output_timeout: '3m'
                  command: |
                      node --version
                      cd test-project

                      echo "Testing using Electron browser"
                      docker run -it -v $PWD:/e2e -w /e2e flotwig/included:<< parameters.cypressVersion >>

                      echo "Testing using Chrome browser"
                      docker run -it -v $PWD:/e2e -w /e2e flotwig/included:<< parameters.cypressVersion >> --browser chrome

jobs:
    lint-markdown:
        executor:
            name: node/default
            tag: '12.22'
        steps:
            - checkout
            - node/install-packages:
                override-ci-command: yarn install --frozen-lockfile
            - run: npm run check:markdown

    build-base-image:
        machine:
            image: ubuntu-2004:202111-02
        parameters:
            dockerTag:
                type: string
                description: Image tag to build like "12.14.0"
            resourceClass:
                type: string
                description: Resource class to use for this job
            platformArg:
                type: string
                description: --platform arg for docker build
        resource_class: << parameters.resourceClass >>
        steps:
            - checkout
            - halt-if-docker-image-exists:
                  imageName: flotwig/base:<< parameters.dockerTag >>
            - run:
                  name: building Docker image flotwig/base:<< parameters.dockerTag >>
                  command: |
                      docker build -t flotwig/base:<< parameters.dockerTag >> --platform << parameters.platformArg >> .
                  working_directory: base/<< parameters.dockerTag >>
            - test-base-image:
                  nodeVersion: v<< parameters.dockerTag >>
                  imageName: flotwig/base:<< parameters.dockerTag >>
            - halt-on-branch

    build-browser-image:
        machine:
            image: ubuntu-2004:202111-02
        parameters:
            resourceClass:
                type: string
                description: Resource class to use for this job
            platformArg:
                type: string
                description: --platform arg for docker build
            dockerTag:
                type: string
                description: Image tag to build like "node12.4.0-chrome76"
            chromeVersion:
                type: string
                default: ''
                description: Chrome version to expect in the base image, starts with "Google Chrome XX"
            firefoxVersion:
                type: string
                default: ''
                description: Firefox version to expect in the base image, starts with "Mozilla Firefox XX"
            edgeVersion:
                type: string
                default: ''
                description: Edge version to expect in the base image, starts with "Microsoft Edge"
        resource_class: << parameters.resourceClass >>
        steps:
            - checkout
            - halt-if-docker-image-exists:
                  imageName: flotwig/browsers:<< parameters.dockerTag >>
            - run:
                  name: building Docker image flotwig/browsers:<< parameters.dockerTag >>
                  command: |
                      docker build -t flotwig/browsers:<< parameters.dockerTag >> --platform << parameters.platformArg >> .
                  working_directory: browsers/<< parameters.dockerTag >>
            - test-browser-image:
                  imageName: flotwig/browsers:<< parameters.dockerTag >>
                  chromeVersion: << parameters.chromeVersion >>
                  firefoxVersion: << parameters.firefoxVersion >>
                  edgeVersion: << parameters.edgeVersion >>
            - halt-on-branch

    build-included-image:
        machine:
            image: ubuntu-2004:202111-02
        parameters:
            dockerTag:
                type: string
                description: Image tag to build, should match Cypress version, like "3.8.1"
            resourceClass:
                type: string
                description: Resource class to use for this job
            platformArg:
                type: string
                description: --platform arg for docker build
        resource_class: << parameters.resourceClass >>
        steps:
            - checkout
            - halt-if-docker-image-exists:
                  imageName: flotwig/included:<< parameters.dockerTag >>
            - run:
                  name: building Docker image flotwig/included:<< parameters.dockerTag >>
                  command: |
                      docker build -t flotwig/included:<< parameters.dockerTag >> --platform << parameters.platformArg >> .
                  working_directory: included/<< parameters.dockerTag >>

            - test-included-image-versions:
                  cypressVersion: << parameters.dockerTag >>
                  imageName: flotwig/included:<< parameters.dockerTag >>

            - test-included-image:
                  cypressVersion: << parameters.dockerTag >>
                  imageName: flotwig/included:<< parameters.dockerTag >>
            - halt-on-branch

    push-images:
        ## the multi-arch images have been built and tested by previous jobs, so we're safe to blindly build+push
        machine:
            image: ubuntu-2004:202111-02
        parameters:
            dockerName:
                type: string
                description: Image name to build
            dockerTag:
                type: string
                description: Image tag to build, should match Cypress version, like "3.8.1"
            workingDirectory:
                type: string
                description: Directory with the Dockerfile
        steps:
            - checkout
            - halt-if-docker-image-exists:
                imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
            - halt-on-branch
            - run:
                ## see https://docs.docker.com/desktop/multi-arch/
                name: blindly build + push multi-arch image
                working_directory: << parameters.workingDirectory >>
                command: |
                    echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                    docker buildx create --name builder --use
                    docker buildx inspect --bootstrap
                    docker buildx build --platform linux/amd64,linux/arm64 -t << parameters.dockerName >>:<< parameters.dockerTag >> --push .

workflows:
    version: 2
    lint:
        jobs:
            - lint-markdown
    build-base-images:
        jobs:
            - build-base-image:
                name: "build+test base 16.14.2 arm64"
                dockerTag: "16.14.2"
                resourceClass: arm.medium
                platformArg: linux/arm64
            - build-base-image:
                name: "build+test base 16.14.2 x64"
                dockerTag: "16.14.2"
                resourceClass: medium
                platformArg: linux/amd64
            - push-images:
                name: "push base 16.14.2 images"
                dockerName: 'flotwig/base'
                dockerTag: '16.14.2'
                workingDirectory: 'base/16.14.2'
                context: test-runner:docker-push
                requires:
                    - "build+test base 16.14.2 x64"
                    - "build+test base 16.14.2 arm64"